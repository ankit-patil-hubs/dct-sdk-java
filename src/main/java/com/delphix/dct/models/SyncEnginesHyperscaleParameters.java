/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Parameters to sync the global object from a source engine to a list of target engines registered with a Hyperscale Instance.
 */
@ApiModel(description = "Parameters to sync the global object from a source engine to a list of target engines registered with a Hyperscale Instance.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class SyncEnginesHyperscaleParameters {
  public static final String SERIALIZED_NAME_SOURCE_ENGINE_ID = "source_engine_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENGINE_ID)
  private String sourceEngineId;

  public static final String SERIALIZED_NAME_TARGET_ENGINE_IDS = "target_engine_ids";
  @SerializedName(SERIALIZED_NAME_TARGET_ENGINE_IDS)
  private List<String> targetEngineIds = new ArrayList<String>();


  public SyncEnginesHyperscaleParameters sourceEngineId(String sourceEngineId) {
    
    this.sourceEngineId = sourceEngineId;
    return this;
  }

   /**
   * The ID of the engine to copy the data from.
   * @return sourceEngineId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The ID of the engine to copy the data from.")

  public String getSourceEngineId() {
    return sourceEngineId;
  }


  public void setSourceEngineId(String sourceEngineId) {
    this.sourceEngineId = sourceEngineId;
  }


  public SyncEnginesHyperscaleParameters targetEngineIds(List<String> targetEngineIds) {
    
    this.targetEngineIds = targetEngineIds;
    return this;
  }

  public SyncEnginesHyperscaleParameters addTargetEngineIdsItem(String targetEngineIdsItem) {
    this.targetEngineIds.add(targetEngineIdsItem);
    return this;
  }

   /**
   * The IDs of the target engines to copy the data into.
   * @return targetEngineIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"1\",\"2\"]", required = true, value = "The IDs of the target engines to copy the data into.")

  public List<String> getTargetEngineIds() {
    return targetEngineIds;
  }


  public void setTargetEngineIds(List<String> targetEngineIds) {
    this.targetEngineIds = targetEngineIds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncEnginesHyperscaleParameters syncEnginesHyperscaleParameters = (SyncEnginesHyperscaleParameters) o;
    return Objects.equals(this.sourceEngineId, syncEnginesHyperscaleParameters.sourceEngineId) &&
        Objects.equals(this.targetEngineIds, syncEnginesHyperscaleParameters.targetEngineIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceEngineId, targetEngineIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncEnginesHyperscaleParameters {\n");
    sb.append("    sourceEngineId: ").append(toIndentedString(sourceEngineId)).append("\n");
    sb.append("    targetEngineIds: ").append(toIndentedString(targetEngineIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

