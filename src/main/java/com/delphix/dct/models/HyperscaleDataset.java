/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.HyperscaleDataTypeEnum;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A Hyperscale Dataset.
 */
@ApiModel(description = "A Hyperscale Dataset.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class HyperscaleDataset {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID = "hyperscale_instance_id";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID)
  private String hyperscaleInstanceId;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private HyperscaleDataTypeEnum dataType;

  public static final String SERIALIZED_NAME_MOUNT_POINT_ID = "mount_point_id";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINT_ID)
  private String mountPointId;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connector_id";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = null;


  public HyperscaleDataset id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the Hyperscale Dataset.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Hyperscale Dataset.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public HyperscaleDataset hyperscaleInstanceId(String hyperscaleInstanceId) {
    
    this.hyperscaleInstanceId = hyperscaleInstanceId;
    return this;
  }

   /**
   * The ID of the Hyperscale instance of this Dataset.
   * @return hyperscaleInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Hyperscale instance of this Dataset.")

  public String getHyperscaleInstanceId() {
    return hyperscaleInstanceId;
  }


  public void setHyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
  }


  public HyperscaleDataset dataType(HyperscaleDataTypeEnum dataType) {
    
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HyperscaleDataTypeEnum getDataType() {
    return dataType;
  }


  public void setDataType(HyperscaleDataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public HyperscaleDataset mountPointId(String mountPointId) {
    
    this.mountPointId = mountPointId;
    return this;
  }

   /**
   * The Id of the Hyperscale Mount Point used for this Dataset.
   * @return mountPointId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Id of the Hyperscale Mount Point used for this Dataset.")

  public String getMountPointId() {
    return mountPointId;
  }


  public void setMountPointId(String mountPointId) {
    this.mountPointId = mountPointId;
  }


  public HyperscaleDataset connectorId(String connectorId) {
    
    this.connectorId = connectorId;
    return this;
  }

   /**
   * Id the Hyperscale Connector used to read sensitive data and write masked data.
   * @return connectorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id the Hyperscale Connector used to read sensitive data and write masked data.")

  public String getConnectorId() {
    return connectorId;
  }


  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public HyperscaleDataset tags(List<Tag> tags) {
    
    this.tags = tags;
    return this;
  }

  public HyperscaleDataset addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Tag> getTags() {
    return tags;
  }


  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleDataset hyperscaleDataset = (HyperscaleDataset) o;
    return Objects.equals(this.id, hyperscaleDataset.id) &&
        Objects.equals(this.hyperscaleInstanceId, hyperscaleDataset.hyperscaleInstanceId) &&
        Objects.equals(this.dataType, hyperscaleDataset.dataType) &&
        Objects.equals(this.mountPointId, hyperscaleDataset.mountPointId) &&
        Objects.equals(this.connectorId, hyperscaleDataset.connectorId) &&
        Objects.equals(this.tags, hyperscaleDataset.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hyperscaleInstanceId, dataType, mountPointId, connectorId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleDataset {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hyperscaleInstanceId: ").append(toIndentedString(hyperscaleInstanceId)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    mountPointId: ").append(toIndentedString(mountPointId)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

