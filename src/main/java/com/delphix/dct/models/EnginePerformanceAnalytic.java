/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Analytics Information of the engine.
 */
@ApiModel(description = "Analytics Information of the engine.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class EnginePerformanceAnalytic {
  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  /**
   * The engine type.
   */
  @JsonAdapter(EngineTypeEnum.Adapter.class)
  public enum EngineTypeEnum {
    VIRTUALIZATION("VIRTUALIZATION"),
    
    MASKING("MASKING"),
    
    UNSET("UNSET");

    private String value;

    EngineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineTypeEnum fromValue(String value) {
      for (EngineTypeEnum b : EngineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENGINE_TYPE = "engine_type";
  @SerializedName(SERIALIZED_NAME_ENGINE_TYPE)
  private EngineTypeEnum engineType;

  public static final String SERIALIZED_NAME_AGGREGATION_PERIOD = "aggregation_period";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_PERIOD)
  private Integer aggregationPeriod;

  public static final String SERIALIZED_NAME_CPU_CORES_COUNT = "cpu_cores_count";
  @SerializedName(SERIALIZED_NAME_CPU_CORES_COUNT)
  private Integer cpuCoresCount;

  public static final String SERIALIZED_NAME_CPU_UTILIZATION = "cpu_utilization";
  @SerializedName(SERIALIZED_NAME_CPU_UTILIZATION)
  private Double cpuUtilization;

  public static final String SERIALIZED_NAME_TOTAL_MEMORY = "total_memory";
  @SerializedName(SERIALIZED_NAME_TOTAL_MEMORY)
  private Long totalMemory;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_LATENCY_READ = "average_disk_latency_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_LATENCY_READ)
  private Long averageDiskLatencyRead;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_LATENCY_WRITE = "average_disk_latency_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_LATENCY_WRITE)
  private Long averageDiskLatencyWrite;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_LATENCY_TOTAL = "average_disk_latency_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_LATENCY_TOTAL)
  private Long averageDiskLatencyTotal;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_THROUGHPUT_READ = "average_disk_throughput_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_THROUGHPUT_READ)
  private Long averageDiskThroughputRead;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_THROUGHPUT_WRITE = "average_disk_throughput_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_THROUGHPUT_WRITE)
  private Long averageDiskThroughputWrite;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_THROUGHPUT_TOTAL = "average_disk_throughput_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_THROUGHPUT_TOTAL)
  private Long averageDiskThroughputTotal;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_IOPS_READ = "average_disk_iops_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_IOPS_READ)
  private Long averageDiskIopsRead;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_IOPS_WRITE = "average_disk_iops_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_IOPS_WRITE)
  private Long averageDiskIopsWrite;

  public static final String SERIALIZED_NAME_AVERAGE_DISK_IOPS_TOTAL = "average_disk_iops_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DISK_IOPS_TOTAL)
  private Long averageDiskIopsTotal;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_LATENCY_READ = "average_nfs_latency_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_LATENCY_READ)
  private Long averageNfsLatencyRead;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_LATENCY_WRITE = "average_nfs_latency_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_LATENCY_WRITE)
  private Long averageNfsLatencyWrite;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_LATENCY_TOTAL = "average_nfs_latency_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_LATENCY_TOTAL)
  private Long averageNfsLatencyTotal;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_THROUGHPUT_READ = "average_nfs_throughput_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_THROUGHPUT_READ)
  private Long averageNfsThroughputRead;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_THROUGHPUT_WRITE = "average_nfs_throughput_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_THROUGHPUT_WRITE)
  private Long averageNfsThroughputWrite;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_THROUGHPUT_TOTAL = "average_nfs_throughput_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_THROUGHPUT_TOTAL)
  private Long averageNfsThroughputTotal;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_IOPS_READ = "average_nfs_iops_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_IOPS_READ)
  private Long averageNfsIopsRead;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_IOPS_WRITE = "average_nfs_iops_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_IOPS_WRITE)
  private Long averageNfsIopsWrite;

  public static final String SERIALIZED_NAME_AVERAGE_NFS_IOPS_TOTAL = "average_nfs_iops_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NFS_IOPS_TOTAL)
  private Long averageNfsIopsTotal;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_LATENCY_READ = "average_iscsi_latency_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_LATENCY_READ)
  private Long averageIscsiLatencyRead;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_LATENCY_WRITE = "average_iscsi_latency_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_LATENCY_WRITE)
  private Long averageIscsiLatencyWrite;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_LATENCY_TOTAL = "average_iscsi_latency_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_LATENCY_TOTAL)
  private Long averageIscsiLatencyTotal;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_THROUGHPUT_READ = "average_iscsi_throughput_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_THROUGHPUT_READ)
  private Long averageIscsiThroughputRead;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_THROUGHPUT_WRITE = "average_iscsi_throughput_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_THROUGHPUT_WRITE)
  private Long averageIscsiThroughputWrite;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_THROUGHPUT_TOTAL = "average_iscsi_throughput_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_THROUGHPUT_TOTAL)
  private Long averageIscsiThroughputTotal;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_IOPS_READ = "average_iscsi_iops_read";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_IOPS_READ)
  private Long averageIscsiIopsRead;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_IOPS_WRITE = "average_iscsi_iops_write";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_IOPS_WRITE)
  private Long averageIscsiIopsWrite;

  public static final String SERIALIZED_NAME_AVERAGE_ISCSI_IOPS_TOTAL = "average_iscsi_iops_total";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ISCSI_IOPS_TOTAL)
  private Long averageIscsiIopsTotal;

  public static final String SERIALIZED_NAME_AVERAGE_NETWORK_THROUGHPUT_TRANSMIT = "average_network_throughput_transmit";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NETWORK_THROUGHPUT_TRANSMIT)
  private Long averageNetworkThroughputTransmit;

  public static final String SERIALIZED_NAME_AVERAGE_NETWORK_THROUGHPUT_RECEIVE = "average_network_throughput_receive";
  @SerializedName(SERIALIZED_NAME_AVERAGE_NETWORK_THROUGHPUT_RECEIVE)
  private Long averageNetworkThroughputReceive;


  public EnginePerformanceAnalytic engineName(String engineName) {
    
    this.engineName = engineName;
    return this;
  }

   /**
   * The engine name.
   * @return engineName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The engine name.")

  public String getEngineName() {
    return engineName;
  }


  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public EnginePerformanceAnalytic engineId(String engineId) {
    
    this.engineId = engineId;
    return this;
  }

   /**
   * The engine id.
   * @return engineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The engine id.")

  public String getEngineId() {
    return engineId;
  }


  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public EnginePerformanceAnalytic engineType(EngineTypeEnum engineType) {
    
    this.engineType = engineType;
    return this;
  }

   /**
   * The engine type.
   * @return engineType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The engine type.")

  public EngineTypeEnum getEngineType() {
    return engineType;
  }


  public void setEngineType(EngineTypeEnum engineType) {
    this.engineType = engineType;
  }


  public EnginePerformanceAnalytic aggregationPeriod(Integer aggregationPeriod) {
    
    this.aggregationPeriod = aggregationPeriod;
    return this;
  }

   /**
   * The time period by which engine performance analytics data is being aggregated, in hours.
   * @return aggregationPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time period by which engine performance analytics data is being aggregated, in hours.")

  public Integer getAggregationPeriod() {
    return aggregationPeriod;
  }


  public void setAggregationPeriod(Integer aggregationPeriod) {
    this.aggregationPeriod = aggregationPeriod;
  }


  public EnginePerformanceAnalytic cpuCoresCount(Integer cpuCoresCount) {
    
    this.cpuCoresCount = cpuCoresCount;
    return this;
  }

   /**
   * The total number of CPU cores on this engine.
   * @return cpuCoresCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of CPU cores on this engine.")

  public Integer getCpuCoresCount() {
    return cpuCoresCount;
  }


  public void setCpuCoresCount(Integer cpuCoresCount) {
    this.cpuCoresCount = cpuCoresCount;
  }


  public EnginePerformanceAnalytic cpuUtilization(Double cpuUtilization) {
    
    this.cpuUtilization = cpuUtilization;
    return this;
  }

   /**
   * The total cpu utilization of this engine, in percentage.
   * @return cpuUtilization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total cpu utilization of this engine, in percentage.")

  public Double getCpuUtilization() {
    return cpuUtilization;
  }


  public void setCpuUtilization(Double cpuUtilization) {
    this.cpuUtilization = cpuUtilization;
  }


  public EnginePerformanceAnalytic totalMemory(Long totalMemory) {
    
    this.totalMemory = totalMemory;
    return this;
  }

   /**
   * The total amount of memory on this engine, in bytes.
   * @return totalMemory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of memory on this engine, in bytes.")

  public Long getTotalMemory() {
    return totalMemory;
  }


  public void setTotalMemory(Long totalMemory) {
    this.totalMemory = totalMemory;
  }


  public EnginePerformanceAnalytic averageDiskLatencyRead(Long averageDiskLatencyRead) {
    
    this.averageDiskLatencyRead = averageDiskLatencyRead;
    return this;
  }

   /**
   * The average I/O latency of disk for read operation, in nanoseconds.
   * @return averageDiskLatencyRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of disk for read operation, in nanoseconds.")

  public Long getAverageDiskLatencyRead() {
    return averageDiskLatencyRead;
  }


  public void setAverageDiskLatencyRead(Long averageDiskLatencyRead) {
    this.averageDiskLatencyRead = averageDiskLatencyRead;
  }


  public EnginePerformanceAnalytic averageDiskLatencyWrite(Long averageDiskLatencyWrite) {
    
    this.averageDiskLatencyWrite = averageDiskLatencyWrite;
    return this;
  }

   /**
   * The average I/O latency of disk for write operation, in nanoseconds.
   * @return averageDiskLatencyWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of disk for write operation, in nanoseconds.")

  public Long getAverageDiskLatencyWrite() {
    return averageDiskLatencyWrite;
  }


  public void setAverageDiskLatencyWrite(Long averageDiskLatencyWrite) {
    this.averageDiskLatencyWrite = averageDiskLatencyWrite;
  }


  public EnginePerformanceAnalytic averageDiskLatencyTotal(Long averageDiskLatencyTotal) {
    
    this.averageDiskLatencyTotal = averageDiskLatencyTotal;
    return this;
  }

   /**
   * The average I/O latency of disk for both (read and write) operations, in nanoseconds.
   * @return averageDiskLatencyTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of disk for both (read and write) operations, in nanoseconds.")

  public Long getAverageDiskLatencyTotal() {
    return averageDiskLatencyTotal;
  }


  public void setAverageDiskLatencyTotal(Long averageDiskLatencyTotal) {
    this.averageDiskLatencyTotal = averageDiskLatencyTotal;
  }


  public EnginePerformanceAnalytic averageDiskThroughputRead(Long averageDiskThroughputRead) {
    
    this.averageDiskThroughputRead = averageDiskThroughputRead;
    return this;
  }

   /**
   * The average I/O throughput of disk for read operation, in bytes/s.
   * @return averageDiskThroughputRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of disk for read operation, in bytes/s.")

  public Long getAverageDiskThroughputRead() {
    return averageDiskThroughputRead;
  }


  public void setAverageDiskThroughputRead(Long averageDiskThroughputRead) {
    this.averageDiskThroughputRead = averageDiskThroughputRead;
  }


  public EnginePerformanceAnalytic averageDiskThroughputWrite(Long averageDiskThroughputWrite) {
    
    this.averageDiskThroughputWrite = averageDiskThroughputWrite;
    return this;
  }

   /**
   * The average I/O throughput of disk for write operation, in bytes/s.
   * @return averageDiskThroughputWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of disk for write operation, in bytes/s.")

  public Long getAverageDiskThroughputWrite() {
    return averageDiskThroughputWrite;
  }


  public void setAverageDiskThroughputWrite(Long averageDiskThroughputWrite) {
    this.averageDiskThroughputWrite = averageDiskThroughputWrite;
  }


  public EnginePerformanceAnalytic averageDiskThroughputTotal(Long averageDiskThroughputTotal) {
    
    this.averageDiskThroughputTotal = averageDiskThroughputTotal;
    return this;
  }

   /**
   * The average I/O throughput of disk for both (read and write) operations, in bytes/s.
   * @return averageDiskThroughputTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of disk for both (read and write) operations, in bytes/s.")

  public Long getAverageDiskThroughputTotal() {
    return averageDiskThroughputTotal;
  }


  public void setAverageDiskThroughputTotal(Long averageDiskThroughputTotal) {
    this.averageDiskThroughputTotal = averageDiskThroughputTotal;
  }


  public EnginePerformanceAnalytic averageDiskIopsRead(Long averageDiskIopsRead) {
    
    this.averageDiskIopsRead = averageDiskIopsRead;
    return this;
  }

   /**
   * The average number of read I/O operations of disk per seconds.
   * @return averageDiskIopsRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of read I/O operations of disk per seconds.")

  public Long getAverageDiskIopsRead() {
    return averageDiskIopsRead;
  }


  public void setAverageDiskIopsRead(Long averageDiskIopsRead) {
    this.averageDiskIopsRead = averageDiskIopsRead;
  }


  public EnginePerformanceAnalytic averageDiskIopsWrite(Long averageDiskIopsWrite) {
    
    this.averageDiskIopsWrite = averageDiskIopsWrite;
    return this;
  }

   /**
   * The average number of write I/O operations of disk per seconds.
   * @return averageDiskIopsWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of write I/O operations of disk per seconds.")

  public Long getAverageDiskIopsWrite() {
    return averageDiskIopsWrite;
  }


  public void setAverageDiskIopsWrite(Long averageDiskIopsWrite) {
    this.averageDiskIopsWrite = averageDiskIopsWrite;
  }


  public EnginePerformanceAnalytic averageDiskIopsTotal(Long averageDiskIopsTotal) {
    
    this.averageDiskIopsTotal = averageDiskIopsTotal;
    return this;
  }

   /**
   * The average number of read and write I/O operations of disk per seconds.
   * @return averageDiskIopsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of read and write I/O operations of disk per seconds.")

  public Long getAverageDiskIopsTotal() {
    return averageDiskIopsTotal;
  }


  public void setAverageDiskIopsTotal(Long averageDiskIopsTotal) {
    this.averageDiskIopsTotal = averageDiskIopsTotal;
  }


  public EnginePerformanceAnalytic averageNfsLatencyRead(Long averageNfsLatencyRead) {
    
    this.averageNfsLatencyRead = averageNfsLatencyRead;
    return this;
  }

   /**
   * The average I/O latency of nfs for read operation, in nanoseconds.
   * @return averageNfsLatencyRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of nfs for read operation, in nanoseconds.")

  public Long getAverageNfsLatencyRead() {
    return averageNfsLatencyRead;
  }


  public void setAverageNfsLatencyRead(Long averageNfsLatencyRead) {
    this.averageNfsLatencyRead = averageNfsLatencyRead;
  }


  public EnginePerformanceAnalytic averageNfsLatencyWrite(Long averageNfsLatencyWrite) {
    
    this.averageNfsLatencyWrite = averageNfsLatencyWrite;
    return this;
  }

   /**
   * The average I/O latency of nfs for write operation, in nanoseconds.
   * @return averageNfsLatencyWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of nfs for write operation, in nanoseconds.")

  public Long getAverageNfsLatencyWrite() {
    return averageNfsLatencyWrite;
  }


  public void setAverageNfsLatencyWrite(Long averageNfsLatencyWrite) {
    this.averageNfsLatencyWrite = averageNfsLatencyWrite;
  }


  public EnginePerformanceAnalytic averageNfsLatencyTotal(Long averageNfsLatencyTotal) {
    
    this.averageNfsLatencyTotal = averageNfsLatencyTotal;
    return this;
  }

   /**
   * The average I/O latency of nfs for both (read and write) operation, in nanoseconds.
   * @return averageNfsLatencyTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of nfs for both (read and write) operation, in nanoseconds.")

  public Long getAverageNfsLatencyTotal() {
    return averageNfsLatencyTotal;
  }


  public void setAverageNfsLatencyTotal(Long averageNfsLatencyTotal) {
    this.averageNfsLatencyTotal = averageNfsLatencyTotal;
  }


  public EnginePerformanceAnalytic averageNfsThroughputRead(Long averageNfsThroughputRead) {
    
    this.averageNfsThroughputRead = averageNfsThroughputRead;
    return this;
  }

   /**
   * The average I/O throughput of disk for read operations, in bytes/s.
   * @return averageNfsThroughputRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of disk for read operations, in bytes/s.")

  public Long getAverageNfsThroughputRead() {
    return averageNfsThroughputRead;
  }


  public void setAverageNfsThroughputRead(Long averageNfsThroughputRead) {
    this.averageNfsThroughputRead = averageNfsThroughputRead;
  }


  public EnginePerformanceAnalytic averageNfsThroughputWrite(Long averageNfsThroughputWrite) {
    
    this.averageNfsThroughputWrite = averageNfsThroughputWrite;
    return this;
  }

   /**
   * The average I/O throughput of nfs for write operations, in bytes/s.
   * @return averageNfsThroughputWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of nfs for write operations, in bytes/s.")

  public Long getAverageNfsThroughputWrite() {
    return averageNfsThroughputWrite;
  }


  public void setAverageNfsThroughputWrite(Long averageNfsThroughputWrite) {
    this.averageNfsThroughputWrite = averageNfsThroughputWrite;
  }


  public EnginePerformanceAnalytic averageNfsThroughputTotal(Long averageNfsThroughputTotal) {
    
    this.averageNfsThroughputTotal = averageNfsThroughputTotal;
    return this;
  }

   /**
   * The average I/O throughput of nfs for both (read and write) operations, in bytes/s.
   * @return averageNfsThroughputTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of nfs for both (read and write) operations, in bytes/s.")

  public Long getAverageNfsThroughputTotal() {
    return averageNfsThroughputTotal;
  }


  public void setAverageNfsThroughputTotal(Long averageNfsThroughputTotal) {
    this.averageNfsThroughputTotal = averageNfsThroughputTotal;
  }


  public EnginePerformanceAnalytic averageNfsIopsRead(Long averageNfsIopsRead) {
    
    this.averageNfsIopsRead = averageNfsIopsRead;
    return this;
  }

   /**
   * The average number of read I/O operations of nfs per seconds.
   * @return averageNfsIopsRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of read I/O operations of nfs per seconds.")

  public Long getAverageNfsIopsRead() {
    return averageNfsIopsRead;
  }


  public void setAverageNfsIopsRead(Long averageNfsIopsRead) {
    this.averageNfsIopsRead = averageNfsIopsRead;
  }


  public EnginePerformanceAnalytic averageNfsIopsWrite(Long averageNfsIopsWrite) {
    
    this.averageNfsIopsWrite = averageNfsIopsWrite;
    return this;
  }

   /**
   * The average number of write I/O operations of nfs per seconds.
   * @return averageNfsIopsWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of write I/O operations of nfs per seconds.")

  public Long getAverageNfsIopsWrite() {
    return averageNfsIopsWrite;
  }


  public void setAverageNfsIopsWrite(Long averageNfsIopsWrite) {
    this.averageNfsIopsWrite = averageNfsIopsWrite;
  }


  public EnginePerformanceAnalytic averageNfsIopsTotal(Long averageNfsIopsTotal) {
    
    this.averageNfsIopsTotal = averageNfsIopsTotal;
    return this;
  }

   /**
   * The average number of read and write I/O operations of nfs per seconds.
   * @return averageNfsIopsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of read and write I/O operations of nfs per seconds.")

  public Long getAverageNfsIopsTotal() {
    return averageNfsIopsTotal;
  }


  public void setAverageNfsIopsTotal(Long averageNfsIopsTotal) {
    this.averageNfsIopsTotal = averageNfsIopsTotal;
  }


  public EnginePerformanceAnalytic averageIscsiLatencyRead(Long averageIscsiLatencyRead) {
    
    this.averageIscsiLatencyRead = averageIscsiLatencyRead;
    return this;
  }

   /**
   * The average I/O latency of iSCSI for read operation, in nanoseconds.
   * @return averageIscsiLatencyRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of iSCSI for read operation, in nanoseconds.")

  public Long getAverageIscsiLatencyRead() {
    return averageIscsiLatencyRead;
  }


  public void setAverageIscsiLatencyRead(Long averageIscsiLatencyRead) {
    this.averageIscsiLatencyRead = averageIscsiLatencyRead;
  }


  public EnginePerformanceAnalytic averageIscsiLatencyWrite(Long averageIscsiLatencyWrite) {
    
    this.averageIscsiLatencyWrite = averageIscsiLatencyWrite;
    return this;
  }

   /**
   * The average I/O latency of iSCSI for write operation, in nanoseconds.
   * @return averageIscsiLatencyWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of iSCSI for write operation, in nanoseconds.")

  public Long getAverageIscsiLatencyWrite() {
    return averageIscsiLatencyWrite;
  }


  public void setAverageIscsiLatencyWrite(Long averageIscsiLatencyWrite) {
    this.averageIscsiLatencyWrite = averageIscsiLatencyWrite;
  }


  public EnginePerformanceAnalytic averageIscsiLatencyTotal(Long averageIscsiLatencyTotal) {
    
    this.averageIscsiLatencyTotal = averageIscsiLatencyTotal;
    return this;
  }

   /**
   * The average I/O latency of iSCSI for both (read and write) operation, in nanoseconds.
   * @return averageIscsiLatencyTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O latency of iSCSI for both (read and write) operation, in nanoseconds.")

  public Long getAverageIscsiLatencyTotal() {
    return averageIscsiLatencyTotal;
  }


  public void setAverageIscsiLatencyTotal(Long averageIscsiLatencyTotal) {
    this.averageIscsiLatencyTotal = averageIscsiLatencyTotal;
  }


  public EnginePerformanceAnalytic averageIscsiThroughputRead(Long averageIscsiThroughputRead) {
    
    this.averageIscsiThroughputRead = averageIscsiThroughputRead;
    return this;
  }

   /**
   * The average I/O throughput of iSCSI read operations, in bytes/s.
   * @return averageIscsiThroughputRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of iSCSI read operations, in bytes/s.")

  public Long getAverageIscsiThroughputRead() {
    return averageIscsiThroughputRead;
  }


  public void setAverageIscsiThroughputRead(Long averageIscsiThroughputRead) {
    this.averageIscsiThroughputRead = averageIscsiThroughputRead;
  }


  public EnginePerformanceAnalytic averageIscsiThroughputWrite(Long averageIscsiThroughputWrite) {
    
    this.averageIscsiThroughputWrite = averageIscsiThroughputWrite;
    return this;
  }

   /**
   * The average I/O throughput of iSCSI for write operations, in bytes/s.
   * @return averageIscsiThroughputWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of iSCSI for write operations, in bytes/s.")

  public Long getAverageIscsiThroughputWrite() {
    return averageIscsiThroughputWrite;
  }


  public void setAverageIscsiThroughputWrite(Long averageIscsiThroughputWrite) {
    this.averageIscsiThroughputWrite = averageIscsiThroughputWrite;
  }


  public EnginePerformanceAnalytic averageIscsiThroughputTotal(Long averageIscsiThroughputTotal) {
    
    this.averageIscsiThroughputTotal = averageIscsiThroughputTotal;
    return this;
  }

   /**
   * The average I/O throughput of iSCSI for both (read and write) operations, in bytes/s.
   * @return averageIscsiThroughputTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average I/O throughput of iSCSI for both (read and write) operations, in bytes/s.")

  public Long getAverageIscsiThroughputTotal() {
    return averageIscsiThroughputTotal;
  }


  public void setAverageIscsiThroughputTotal(Long averageIscsiThroughputTotal) {
    this.averageIscsiThroughputTotal = averageIscsiThroughputTotal;
  }


  public EnginePerformanceAnalytic averageIscsiIopsRead(Long averageIscsiIopsRead) {
    
    this.averageIscsiIopsRead = averageIscsiIopsRead;
    return this;
  }

   /**
   * The average number of read I/O operations of iSCSI per seconds.
   * @return averageIscsiIopsRead
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of read I/O operations of iSCSI per seconds.")

  public Long getAverageIscsiIopsRead() {
    return averageIscsiIopsRead;
  }


  public void setAverageIscsiIopsRead(Long averageIscsiIopsRead) {
    this.averageIscsiIopsRead = averageIscsiIopsRead;
  }


  public EnginePerformanceAnalytic averageIscsiIopsWrite(Long averageIscsiIopsWrite) {
    
    this.averageIscsiIopsWrite = averageIscsiIopsWrite;
    return this;
  }

   /**
   * The average number of write I/O operations of iSCSI per seconds.
   * @return averageIscsiIopsWrite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of write I/O operations of iSCSI per seconds.")

  public Long getAverageIscsiIopsWrite() {
    return averageIscsiIopsWrite;
  }


  public void setAverageIscsiIopsWrite(Long averageIscsiIopsWrite) {
    this.averageIscsiIopsWrite = averageIscsiIopsWrite;
  }


  public EnginePerformanceAnalytic averageIscsiIopsTotal(Long averageIscsiIopsTotal) {
    
    this.averageIscsiIopsTotal = averageIscsiIopsTotal;
    return this;
  }

   /**
   * The average number of read and write I/O operations of iSCSI per seconds.
   * @return averageIscsiIopsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average number of read and write I/O operations of iSCSI per seconds.")

  public Long getAverageIscsiIopsTotal() {
    return averageIscsiIopsTotal;
  }


  public void setAverageIscsiIopsTotal(Long averageIscsiIopsTotal) {
    this.averageIscsiIopsTotal = averageIscsiIopsTotal;
  }


  public EnginePerformanceAnalytic averageNetworkThroughputTransmit(Long averageNetworkThroughputTransmit) {
    
    this.averageNetworkThroughputTransmit = averageNetworkThroughputTransmit;
    return this;
  }

   /**
   * The average bytes transmitted on the network interface, in bytes/s.
   * @return averageNetworkThroughputTransmit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average bytes transmitted on the network interface, in bytes/s.")

  public Long getAverageNetworkThroughputTransmit() {
    return averageNetworkThroughputTransmit;
  }


  public void setAverageNetworkThroughputTransmit(Long averageNetworkThroughputTransmit) {
    this.averageNetworkThroughputTransmit = averageNetworkThroughputTransmit;
  }


  public EnginePerformanceAnalytic averageNetworkThroughputReceive(Long averageNetworkThroughputReceive) {
    
    this.averageNetworkThroughputReceive = averageNetworkThroughputReceive;
    return this;
  }

   /**
   * The average bytes received on the network interface, in bytes/s.
   * @return averageNetworkThroughputReceive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The average bytes received on the network interface, in bytes/s.")

  public Long getAverageNetworkThroughputReceive() {
    return averageNetworkThroughputReceive;
  }


  public void setAverageNetworkThroughputReceive(Long averageNetworkThroughputReceive) {
    this.averageNetworkThroughputReceive = averageNetworkThroughputReceive;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnginePerformanceAnalytic enginePerformanceAnalytic = (EnginePerformanceAnalytic) o;
    return Objects.equals(this.engineName, enginePerformanceAnalytic.engineName) &&
        Objects.equals(this.engineId, enginePerformanceAnalytic.engineId) &&
        Objects.equals(this.engineType, enginePerformanceAnalytic.engineType) &&
        Objects.equals(this.aggregationPeriod, enginePerformanceAnalytic.aggregationPeriod) &&
        Objects.equals(this.cpuCoresCount, enginePerformanceAnalytic.cpuCoresCount) &&
        Objects.equals(this.cpuUtilization, enginePerformanceAnalytic.cpuUtilization) &&
        Objects.equals(this.totalMemory, enginePerformanceAnalytic.totalMemory) &&
        Objects.equals(this.averageDiskLatencyRead, enginePerformanceAnalytic.averageDiskLatencyRead) &&
        Objects.equals(this.averageDiskLatencyWrite, enginePerformanceAnalytic.averageDiskLatencyWrite) &&
        Objects.equals(this.averageDiskLatencyTotal, enginePerformanceAnalytic.averageDiskLatencyTotal) &&
        Objects.equals(this.averageDiskThroughputRead, enginePerformanceAnalytic.averageDiskThroughputRead) &&
        Objects.equals(this.averageDiskThroughputWrite, enginePerformanceAnalytic.averageDiskThroughputWrite) &&
        Objects.equals(this.averageDiskThroughputTotal, enginePerformanceAnalytic.averageDiskThroughputTotal) &&
        Objects.equals(this.averageDiskIopsRead, enginePerformanceAnalytic.averageDiskIopsRead) &&
        Objects.equals(this.averageDiskIopsWrite, enginePerformanceAnalytic.averageDiskIopsWrite) &&
        Objects.equals(this.averageDiskIopsTotal, enginePerformanceAnalytic.averageDiskIopsTotal) &&
        Objects.equals(this.averageNfsLatencyRead, enginePerformanceAnalytic.averageNfsLatencyRead) &&
        Objects.equals(this.averageNfsLatencyWrite, enginePerformanceAnalytic.averageNfsLatencyWrite) &&
        Objects.equals(this.averageNfsLatencyTotal, enginePerformanceAnalytic.averageNfsLatencyTotal) &&
        Objects.equals(this.averageNfsThroughputRead, enginePerformanceAnalytic.averageNfsThroughputRead) &&
        Objects.equals(this.averageNfsThroughputWrite, enginePerformanceAnalytic.averageNfsThroughputWrite) &&
        Objects.equals(this.averageNfsThroughputTotal, enginePerformanceAnalytic.averageNfsThroughputTotal) &&
        Objects.equals(this.averageNfsIopsRead, enginePerformanceAnalytic.averageNfsIopsRead) &&
        Objects.equals(this.averageNfsIopsWrite, enginePerformanceAnalytic.averageNfsIopsWrite) &&
        Objects.equals(this.averageNfsIopsTotal, enginePerformanceAnalytic.averageNfsIopsTotal) &&
        Objects.equals(this.averageIscsiLatencyRead, enginePerformanceAnalytic.averageIscsiLatencyRead) &&
        Objects.equals(this.averageIscsiLatencyWrite, enginePerformanceAnalytic.averageIscsiLatencyWrite) &&
        Objects.equals(this.averageIscsiLatencyTotal, enginePerformanceAnalytic.averageIscsiLatencyTotal) &&
        Objects.equals(this.averageIscsiThroughputRead, enginePerformanceAnalytic.averageIscsiThroughputRead) &&
        Objects.equals(this.averageIscsiThroughputWrite, enginePerformanceAnalytic.averageIscsiThroughputWrite) &&
        Objects.equals(this.averageIscsiThroughputTotal, enginePerformanceAnalytic.averageIscsiThroughputTotal) &&
        Objects.equals(this.averageIscsiIopsRead, enginePerformanceAnalytic.averageIscsiIopsRead) &&
        Objects.equals(this.averageIscsiIopsWrite, enginePerformanceAnalytic.averageIscsiIopsWrite) &&
        Objects.equals(this.averageIscsiIopsTotal, enginePerformanceAnalytic.averageIscsiIopsTotal) &&
        Objects.equals(this.averageNetworkThroughputTransmit, enginePerformanceAnalytic.averageNetworkThroughputTransmit) &&
        Objects.equals(this.averageNetworkThroughputReceive, enginePerformanceAnalytic.averageNetworkThroughputReceive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engineName, engineId, engineType, aggregationPeriod, cpuCoresCount, cpuUtilization, totalMemory, averageDiskLatencyRead, averageDiskLatencyWrite, averageDiskLatencyTotal, averageDiskThroughputRead, averageDiskThroughputWrite, averageDiskThroughputTotal, averageDiskIopsRead, averageDiskIopsWrite, averageDiskIopsTotal, averageNfsLatencyRead, averageNfsLatencyWrite, averageNfsLatencyTotal, averageNfsThroughputRead, averageNfsThroughputWrite, averageNfsThroughputTotal, averageNfsIopsRead, averageNfsIopsWrite, averageNfsIopsTotal, averageIscsiLatencyRead, averageIscsiLatencyWrite, averageIscsiLatencyTotal, averageIscsiThroughputRead, averageIscsiThroughputWrite, averageIscsiThroughputTotal, averageIscsiIopsRead, averageIscsiIopsWrite, averageIscsiIopsTotal, averageNetworkThroughputTransmit, averageNetworkThroughputReceive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnginePerformanceAnalytic {\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    aggregationPeriod: ").append(toIndentedString(aggregationPeriod)).append("\n");
    sb.append("    cpuCoresCount: ").append(toIndentedString(cpuCoresCount)).append("\n");
    sb.append("    cpuUtilization: ").append(toIndentedString(cpuUtilization)).append("\n");
    sb.append("    totalMemory: ").append(toIndentedString(totalMemory)).append("\n");
    sb.append("    averageDiskLatencyRead: ").append(toIndentedString(averageDiskLatencyRead)).append("\n");
    sb.append("    averageDiskLatencyWrite: ").append(toIndentedString(averageDiskLatencyWrite)).append("\n");
    sb.append("    averageDiskLatencyTotal: ").append(toIndentedString(averageDiskLatencyTotal)).append("\n");
    sb.append("    averageDiskThroughputRead: ").append(toIndentedString(averageDiskThroughputRead)).append("\n");
    sb.append("    averageDiskThroughputWrite: ").append(toIndentedString(averageDiskThroughputWrite)).append("\n");
    sb.append("    averageDiskThroughputTotal: ").append(toIndentedString(averageDiskThroughputTotal)).append("\n");
    sb.append("    averageDiskIopsRead: ").append(toIndentedString(averageDiskIopsRead)).append("\n");
    sb.append("    averageDiskIopsWrite: ").append(toIndentedString(averageDiskIopsWrite)).append("\n");
    sb.append("    averageDiskIopsTotal: ").append(toIndentedString(averageDiskIopsTotal)).append("\n");
    sb.append("    averageNfsLatencyRead: ").append(toIndentedString(averageNfsLatencyRead)).append("\n");
    sb.append("    averageNfsLatencyWrite: ").append(toIndentedString(averageNfsLatencyWrite)).append("\n");
    sb.append("    averageNfsLatencyTotal: ").append(toIndentedString(averageNfsLatencyTotal)).append("\n");
    sb.append("    averageNfsThroughputRead: ").append(toIndentedString(averageNfsThroughputRead)).append("\n");
    sb.append("    averageNfsThroughputWrite: ").append(toIndentedString(averageNfsThroughputWrite)).append("\n");
    sb.append("    averageNfsThroughputTotal: ").append(toIndentedString(averageNfsThroughputTotal)).append("\n");
    sb.append("    averageNfsIopsRead: ").append(toIndentedString(averageNfsIopsRead)).append("\n");
    sb.append("    averageNfsIopsWrite: ").append(toIndentedString(averageNfsIopsWrite)).append("\n");
    sb.append("    averageNfsIopsTotal: ").append(toIndentedString(averageNfsIopsTotal)).append("\n");
    sb.append("    averageIscsiLatencyRead: ").append(toIndentedString(averageIscsiLatencyRead)).append("\n");
    sb.append("    averageIscsiLatencyWrite: ").append(toIndentedString(averageIscsiLatencyWrite)).append("\n");
    sb.append("    averageIscsiLatencyTotal: ").append(toIndentedString(averageIscsiLatencyTotal)).append("\n");
    sb.append("    averageIscsiThroughputRead: ").append(toIndentedString(averageIscsiThroughputRead)).append("\n");
    sb.append("    averageIscsiThroughputWrite: ").append(toIndentedString(averageIscsiThroughputWrite)).append("\n");
    sb.append("    averageIscsiThroughputTotal: ").append(toIndentedString(averageIscsiThroughputTotal)).append("\n");
    sb.append("    averageIscsiIopsRead: ").append(toIndentedString(averageIscsiIopsRead)).append("\n");
    sb.append("    averageIscsiIopsWrite: ").append(toIndentedString(averageIscsiIopsWrite)).append("\n");
    sb.append("    averageIscsiIopsTotal: ").append(toIndentedString(averageIscsiIopsTotal)).append("\n");
    sb.append("    averageNetworkThroughputTransmit: ").append(toIndentedString(averageNetworkThroughputTransmit)).append("\n");
    sb.append("    averageNetworkThroughputReceive: ").append(toIndentedString(averageNetworkThroughputReceive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

