/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.EnginePerformanceAnalyticTrendDatapoint;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * EnginePerformanceAnalyticTrend
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class EnginePerformanceAnalyticTrend {
  /**
   * Gets or Sets trendType
   */
  @JsonAdapter(TrendTypeEnum.Adapter.class)
  public enum TrendTypeEnum {
    CPU_UTILIZATION("CPU_UTILIZATION"),
    
    NETWORK_THROUGHPUT_TRANSMIT("NETWORK_THROUGHPUT_TRANSMIT"),
    
    NETWORK_THROUGHPUT_RECEIVE("NETWORK_THROUGHPUT_RECEIVE"),
    
    DISK_LATENCY_WRITE("DISK_LATENCY_WRITE"),
    
    DISK_LATENCY_READ("DISK_LATENCY_READ"),
    
    DISK_LATENCY_TOTAL("DISK_LATENCY_TOTAL"),
    
    DISK_THROUGHPUT_WRITE("DISK_THROUGHPUT_WRITE"),
    
    DISK_THROUGHPUT_READ("DISK_THROUGHPUT_READ"),
    
    DISK_THROUGHPUT_TOTAL("DISK_THROUGHPUT_TOTAL"),
    
    DISK_IOPS_READ("DISK_IOPS_READ"),
    
    DISK_IOPS_WRITE("DISK_IOPS_WRITE"),
    
    DISK_IOPS_TOTAL("DISK_IOPS_TOTAL"),
    
    NFS_LATENCY_WRITE("NFS_LATENCY_WRITE"),
    
    NFS_LATENCY_READ("NFS_LATENCY_READ"),
    
    NFS_LATENCY_TOTAL("NFS_LATENCY_TOTAL"),
    
    NFS_THROUGHPUT_WRITE("NFS_THROUGHPUT_WRITE"),
    
    NFS_THROUGHPUT_READ("NFS_THROUGHPUT_READ"),
    
    NFS_THROUGHPUT_TOTAL("NFS_THROUGHPUT_TOTAL"),
    
    NFS_IOPS_WRITE("NFS_IOPS_WRITE"),
    
    NFS_IOPS_READ("NFS_IOPS_READ"),
    
    NFS_IOPS_TOTAL("NFS_IOPS_TOTAL"),
    
    ISCSI_LATENCY_WRITE("iSCSI_LATENCY_WRITE"),
    
    ISCSI_LATENCY_READ("iSCSI_LATENCY_READ"),
    
    ISCSI_LATENCY_TOTAL("iSCSI_LATENCY_TOTAL"),
    
    ISCSI_THROUGHPUT_WRITE("iSCSI_THROUGHPUT_WRITE"),
    
    ISCSI_THROUGHPUT_READ("iSCSI_THROUGHPUT_READ"),
    
    ISCSI_THROUGHPUT_TOTAL("iSCSI_THROUGHPUT_TOTAL"),
    
    ISCSI_IOPS_WRITE("iSCSI_IOPS_WRITE"),
    
    ISCSI_IOPS_READ("iSCSI_IOPS_READ"),
    
    ISCSI_IOPS_TOTAL("iSCSI_IOPS_TOTAL");

    private String value;

    TrendTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrendTypeEnum fromValue(String value) {
      for (TrendTypeEnum b : TrendTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrendTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrendTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrendTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrendTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TREND_TYPE = "trend_type";
  @SerializedName(SERIALIZED_NAME_TREND_TYPE)
  private TrendTypeEnum trendType;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_AGGREGATION_PERIOD = "aggregation_period";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_PERIOD)
  private Integer aggregationPeriod;

  public static final String SERIALIZED_NAME_DATAPOINT = "datapoint";
  @SerializedName(SERIALIZED_NAME_DATAPOINT)
  private List<EnginePerformanceAnalyticTrendDatapoint> datapoint = null;


  public EnginePerformanceAnalyticTrend trendType(TrendTypeEnum trendType) {
    
    this.trendType = trendType;
    return this;
  }

   /**
   * Get trendType
   * @return trendType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CPU_UTILIZATION", value = "")

  public TrendTypeEnum getTrendType() {
    return trendType;
  }


  public void setTrendType(TrendTypeEnum trendType) {
    this.trendType = trendType;
  }


  public EnginePerformanceAnalyticTrend engineId(String engineId) {
    
    this.engineId = engineId;
    return this;
  }

   /**
   * The engine id.
   * @return engineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The engine id.")

  public String getEngineId() {
    return engineId;
  }


  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public EnginePerformanceAnalyticTrend aggregationPeriod(Integer aggregationPeriod) {
    
    this.aggregationPeriod = aggregationPeriod;
    return this;
  }

   /**
   * The time period by which engine performance analytics data is being aggregated, in hours.
   * @return aggregationPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "The time period by which engine performance analytics data is being aggregated, in hours.")

  public Integer getAggregationPeriod() {
    return aggregationPeriod;
  }


  public void setAggregationPeriod(Integer aggregationPeriod) {
    this.aggregationPeriod = aggregationPeriod;
  }


  public EnginePerformanceAnalyticTrend datapoint(List<EnginePerformanceAnalyticTrendDatapoint> datapoint) {
    
    this.datapoint = datapoint;
    return this;
  }

  public EnginePerformanceAnalyticTrend addDatapointItem(EnginePerformanceAnalyticTrendDatapoint datapointItem) {
    if (this.datapoint == null) {
      this.datapoint = new ArrayList<EnginePerformanceAnalyticTrendDatapoint>();
    }
    this.datapoint.add(datapointItem);
    return this;
  }

   /**
   * Get datapoint
   * @return datapoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnginePerformanceAnalyticTrendDatapoint> getDatapoint() {
    return datapoint;
  }


  public void setDatapoint(List<EnginePerformanceAnalyticTrendDatapoint> datapoint) {
    this.datapoint = datapoint;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnginePerformanceAnalyticTrend enginePerformanceAnalyticTrend = (EnginePerformanceAnalyticTrend) o;
    return Objects.equals(this.trendType, enginePerformanceAnalyticTrend.trendType) &&
        Objects.equals(this.engineId, enginePerformanceAnalyticTrend.engineId) &&
        Objects.equals(this.aggregationPeriod, enginePerformanceAnalyticTrend.aggregationPeriod) &&
        Objects.equals(this.datapoint, enginePerformanceAnalyticTrend.datapoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trendType, engineId, aggregationPeriod, datapoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnginePerformanceAnalyticTrend {\n");
    sb.append("    trendType: ").append(toIndentedString(trendType)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    aggregationPeriod: ").append(toIndentedString(aggregationPeriod)).append("\n");
    sb.append("    datapoint: ").append(toIndentedString(datapoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

