/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The updatable properties of a Hyperscale Mount Point.
 */
@ApiModel(description = "The updatable properties of a Hyperscale Mount Point.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class HyperscaleMountPointUpdateParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_MOUNT_PATH = "mount_path";
  @SerializedName(SERIALIZED_NAME_MOUNT_PATH)
  private String mountPath;

  /**
   * The type of filesystem.
   */
  @JsonAdapter(MountTypeEnum.Adapter.class)
  public enum MountTypeEnum {
    CIFS("CIFS"),
    
    NFS3("NFS3"),
    
    NFS4("NFS4");

    private String value;

    MountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MountTypeEnum fromValue(String value) {
      for (MountTypeEnum b : MountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MOUNT_TYPE = "mount_type";
  @SerializedName(SERIALIZED_NAME_MOUNT_TYPE)
  private MountTypeEnum mountType;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options;


  public HyperscaleMountPointUpdateParameters name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the mount, unique for a hyperscale instance.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the mount, unique for a hyperscale instance.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public HyperscaleMountPointUpdateParameters hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The host name of the server.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The host name of the server.")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public HyperscaleMountPointUpdateParameters mountPath(String mountPath) {
    
    this.mountPath = mountPath;
    return this;
  }

   /**
   * The path to the directory on the filesystem to mount.
   * @return mountPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the directory on the filesystem to mount.")

  public String getMountPath() {
    return mountPath;
  }


  public void setMountPath(String mountPath) {
    this.mountPath = mountPath;
  }


  public HyperscaleMountPointUpdateParameters mountType(MountTypeEnum mountType) {
    
    this.mountType = mountType;
    return this;
  }

   /**
   * The type of filesystem.
   * @return mountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of filesystem.")

  public MountTypeEnum getMountType() {
    return mountType;
  }


  public void setMountType(MountTypeEnum mountType) {
    this.mountType = mountType;
  }


  public HyperscaleMountPointUpdateParameters options(String options) {
    
    this.options = options;
    return this;
  }

   /**
   * The mount options.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mount options.")

  public String getOptions() {
    return options;
  }


  public void setOptions(String options) {
    this.options = options;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters = (HyperscaleMountPointUpdateParameters) o;
    return Objects.equals(this.name, hyperscaleMountPointUpdateParameters.name) &&
        Objects.equals(this.hostname, hyperscaleMountPointUpdateParameters.hostname) &&
        Objects.equals(this.mountPath, hyperscaleMountPointUpdateParameters.mountPath) &&
        Objects.equals(this.mountType, hyperscaleMountPointUpdateParameters.mountType) &&
        Objects.equals(this.options, hyperscaleMountPointUpdateParameters.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, hostname, mountPath, mountType, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleMountPointUpdateParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    mountPath: ").append(toIndentedString(mountPath)).append("\n");
    sb.append("    mountType: ").append(toIndentedString(mountType)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

