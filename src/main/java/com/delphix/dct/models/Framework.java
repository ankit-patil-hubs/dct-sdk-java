/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * A masking algorithm framework.
 */
@ApiModel(description = "A masking algorithm framework.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class Framework {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The masking type of this framework.
   */
  @JsonAdapter(MaskingTypeEnum.Adapter.class)
  public enum MaskingTypeEnum {
    STRING("STRING"),
    
    DATE("DATE"),
    
    LOCAL_DATE_TIME("LOCAL_DATE_TIME"),
    
    BIG_DECIMAL("BIG_DECIMAL"),
    
    BYTE_BUFFER("BYTE_BUFFER"),
    
    GENERIC_DATA_ROW("GENERIC_DATA_ROW"),
    
    ADVANCED_OBJECT("ADVANCED_OBJECT");

    private String value;

    MaskingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaskingTypeEnum fromValue(String value) {
      for (MaskingTypeEnum b : MaskingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaskingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaskingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaskingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaskingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MASKING_TYPE = "masking_type";
  @SerializedName(SERIALIZED_NAME_MASKING_TYPE)
  private MaskingTypeEnum maskingType;


  public Framework id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The masking framework entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dc91e41c-aade-4404-9084-179cb90d07c6", value = "The masking framework entity ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Framework name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this framework.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Secure Lookup", value = "The name of this framework.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Framework description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description of this framework.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Secure Lookup Framework", value = "A description of this framework.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Framework maskingType(MaskingTypeEnum maskingType) {
    
    this.maskingType = maskingType;
    return this;
  }

   /**
   * The masking type of this framework.
   * @return maskingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The masking type of this framework.")

  public MaskingTypeEnum getMaskingType() {
    return maskingType;
  }


  public void setMaskingType(MaskingTypeEnum maskingType) {
    this.maskingType = maskingType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Framework framework = (Framework) o;
    return Objects.equals(this.id, framework.id) &&
        Objects.equals(this.name, framework.name) &&
        Objects.equals(this.description, framework.description) &&
        Objects.equals(this.maskingType, framework.maskingType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && a.get().getClass().isArray() ? Arrays.equals((T[])a.get(), (T[])b.get()) : Objects.equals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, maskingType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent()
      ? (a.get().getClass().isArray() ? Arrays.hashCode((T[])a.get()) : Objects.hashCode(a.get()))
      : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Framework {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maskingType: ").append(toIndentedString(maskingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

