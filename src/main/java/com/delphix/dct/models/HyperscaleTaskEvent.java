/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.HyperscaleTaskError;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * HyperscaleTaskEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:50:51.668272+05:30[Asia/Kolkata]")
public class HyperscaleTaskEvent {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private BigDecimal progress;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CANCELLED("CANCELLED"),
    
    CANCEL_INITIATED("CANCEL_INITIATED"),
    
    FAILED("FAILED"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PROCESSED_OBJECTS = "processed_objects";
  @SerializedName(SERIALIZED_NAME_PROCESSED_OBJECTS)
  private Long processedObjects;

  public static final String SERIALIZED_NAME_PROCESSED_ROWS = "processed_rows";
  @SerializedName(SERIALIZED_NAME_PROCESSED_ROWS)
  private Long processedRows;

  public static final String SERIALIZED_NAME_PROCESSED_CONSTRAINTS = "processed_constraints";
  @SerializedName(SERIALIZED_NAME_PROCESSED_CONSTRAINTS)
  private Long processedConstraints;

  public static final String SERIALIZED_NAME_TOTAL_CONSTRAINTS = "total_constraints";
  @SerializedName(SERIALIZED_NAME_TOTAL_CONSTRAINTS)
  private Long totalConstraints;

  public static final String SERIALIZED_NAME_PROCESSED_INDEXES = "processed_indexes";
  @SerializedName(SERIALIZED_NAME_PROCESSED_INDEXES)
  private Long processedIndexes;

  public static final String SERIALIZED_NAME_TOTAL_INDEXES = "total_indexes";
  @SerializedName(SERIALIZED_NAME_TOTAL_INDEXES)
  private Long totalIndexes;

  public static final String SERIALIZED_NAME_PROCESSED_TRIGGERS = "processed_triggers";
  @SerializedName(SERIALIZED_NAME_PROCESSED_TRIGGERS)
  private Long processedTriggers;

  public static final String SERIALIZED_NAME_TOTAL_TRIGGERS = "total_triggers";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRIGGERS)
  private Long totalTriggers;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<HyperscaleTaskError> errors = null;


  public HyperscaleTaskEvent name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the task (Unload, Masking, Load, Post-Load)
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Unload", value = "Name of the task (Unload, Masking, Load, Post-Load)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public HyperscaleTaskEvent progress(BigDecimal progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * progress of the task (between 0 and 1)
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.34", value = "progress of the task (between 0 and 1)")

  public BigDecimal getProgress() {
    return progress;
  }


  public void setProgress(BigDecimal progress) {
    this.progress = progress;
  }


  public HyperscaleTaskEvent status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FAILED", value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public HyperscaleTaskEvent processedObjects(Long processedObjects) {
    
    this.processedObjects = processedObjects;
    return this;
  }

   /**
   * The number of objects (tables) already processed by this task.
   * @return processedObjects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of objects (tables) already processed by this task.")

  public Long getProcessedObjects() {
    return processedObjects;
  }


  public void setProcessedObjects(Long processedObjects) {
    this.processedObjects = processedObjects;
  }


  public HyperscaleTaskEvent processedRows(Long processedRows) {
    
    this.processedRows = processedRows;
    return this;
  }

   /**
   * The number of rows already processed by this task.
   * @return processedRows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of rows already processed by this task.")

  public Long getProcessedRows() {
    return processedRows;
  }


  public void setProcessedRows(Long processedRows) {
    this.processedRows = processedRows;
  }


  public HyperscaleTaskEvent processedConstraints(Long processedConstraints) {
    
    this.processedConstraints = processedConstraints;
    return this;
  }

   /**
   * The number of constraints processed by this task (Post-load task only)
   * @return processedConstraints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of constraints processed by this task (Post-load task only)")

  public Long getProcessedConstraints() {
    return processedConstraints;
  }


  public void setProcessedConstraints(Long processedConstraints) {
    this.processedConstraints = processedConstraints;
  }


  public HyperscaleTaskEvent totalConstraints(Long totalConstraints) {
    
    this.totalConstraints = totalConstraints;
    return this;
  }

   /**
   * The total number of constraints to be processed by this task (Post-load task only)
   * @return totalConstraints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of constraints to be processed by this task (Post-load task only)")

  public Long getTotalConstraints() {
    return totalConstraints;
  }


  public void setTotalConstraints(Long totalConstraints) {
    this.totalConstraints = totalConstraints;
  }


  public HyperscaleTaskEvent processedIndexes(Long processedIndexes) {
    
    this.processedIndexes = processedIndexes;
    return this;
  }

   /**
   * The number of indexes processed by this task (Post-load task only)
   * @return processedIndexes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of indexes processed by this task (Post-load task only)")

  public Long getProcessedIndexes() {
    return processedIndexes;
  }


  public void setProcessedIndexes(Long processedIndexes) {
    this.processedIndexes = processedIndexes;
  }


  public HyperscaleTaskEvent totalIndexes(Long totalIndexes) {
    
    this.totalIndexes = totalIndexes;
    return this;
  }

   /**
   * The total number of indexes to be processed by this task (Post-load task only)
   * @return totalIndexes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of indexes to be processed by this task (Post-load task only)")

  public Long getTotalIndexes() {
    return totalIndexes;
  }


  public void setTotalIndexes(Long totalIndexes) {
    this.totalIndexes = totalIndexes;
  }


  public HyperscaleTaskEvent processedTriggers(Long processedTriggers) {
    
    this.processedTriggers = processedTriggers;
    return this;
  }

   /**
   * The number of triggered processed by this task (Post-load task only)
   * @return processedTriggers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of triggered processed by this task (Post-load task only)")

  public Long getProcessedTriggers() {
    return processedTriggers;
  }


  public void setProcessedTriggers(Long processedTriggers) {
    this.processedTriggers = processedTriggers;
  }


  public HyperscaleTaskEvent totalTriggers(Long totalTriggers) {
    
    this.totalTriggers = totalTriggers;
    return this;
  }

   /**
   * The total number of triggers to be processed by this task (Post-load task only)
   * @return totalTriggers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of triggers to be processed by this task (Post-load task only)")

  public Long getTotalTriggers() {
    return totalTriggers;
  }


  public void setTotalTriggers(Long totalTriggers) {
    this.totalTriggers = totalTriggers;
  }


  public HyperscaleTaskEvent startTime(OffsetDateTime startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * The date and time that this task was started.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-02T05:11:24.148Z", value = "The date and time that this task was started.")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public HyperscaleTaskEvent endTime(OffsetDateTime endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * The date and time that this task completed.
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-02T05:13:24.148Z", value = "The date and time that this task completed.")

  public OffsetDateTime getEndTime() {
    return endTime;
  }


  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public HyperscaleTaskEvent errors(List<HyperscaleTaskError> errors) {
    
    this.errors = errors;
    return this;
  }

  public HyperscaleTaskEvent addErrorsItem(HyperscaleTaskError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<HyperscaleTaskError>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<HyperscaleTaskError> getErrors() {
    return errors;
  }


  public void setErrors(List<HyperscaleTaskError> errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleTaskEvent hyperscaleTaskEvent = (HyperscaleTaskEvent) o;
    return Objects.equals(this.name, hyperscaleTaskEvent.name) &&
        Objects.equals(this.progress, hyperscaleTaskEvent.progress) &&
        Objects.equals(this.status, hyperscaleTaskEvent.status) &&
        Objects.equals(this.processedObjects, hyperscaleTaskEvent.processedObjects) &&
        Objects.equals(this.processedRows, hyperscaleTaskEvent.processedRows) &&
        Objects.equals(this.processedConstraints, hyperscaleTaskEvent.processedConstraints) &&
        Objects.equals(this.totalConstraints, hyperscaleTaskEvent.totalConstraints) &&
        Objects.equals(this.processedIndexes, hyperscaleTaskEvent.processedIndexes) &&
        Objects.equals(this.totalIndexes, hyperscaleTaskEvent.totalIndexes) &&
        Objects.equals(this.processedTriggers, hyperscaleTaskEvent.processedTriggers) &&
        Objects.equals(this.totalTriggers, hyperscaleTaskEvent.totalTriggers) &&
        Objects.equals(this.startTime, hyperscaleTaskEvent.startTime) &&
        Objects.equals(this.endTime, hyperscaleTaskEvent.endTime) &&
        Objects.equals(this.errors, hyperscaleTaskEvent.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, progress, status, processedObjects, processedRows, processedConstraints, totalConstraints, processedIndexes, totalIndexes, processedTriggers, totalTriggers, startTime, endTime, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleTaskEvent {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    processedObjects: ").append(toIndentedString(processedObjects)).append("\n");
    sb.append("    processedRows: ").append(toIndentedString(processedRows)).append("\n");
    sb.append("    processedConstraints: ").append(toIndentedString(processedConstraints)).append("\n");
    sb.append("    totalConstraints: ").append(toIndentedString(totalConstraints)).append("\n");
    sb.append("    processedIndexes: ").append(toIndentedString(processedIndexes)).append("\n");
    sb.append("    totalIndexes: ").append(toIndentedString(totalIndexes)).append("\n");
    sb.append("    processedTriggers: ").append(toIndentedString(processedTriggers)).append("\n");
    sb.append("    totalTriggers: ").append(toIndentedString(totalTriggers)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

